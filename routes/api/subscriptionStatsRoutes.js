// ==========================================
// ROUTES - routes/api/subscriptionStatsRoutes.js
// ==========================================

const express = require('express');
const router = express.Router();
const subscriptionStatsController = require('../../controllers/subscriptionStatsController');
const authenticateToken = require('../../middleware/authenticateToken');
const { roleBasedAccessControl } = require('../../middleware/conditionalValidation');

// ===============================================
// ROUTES PRINCIPALES - UTILISATION vs LIMITES
// ===============================================

/**
 * ‚úÖ ROUTE PRINCIPALE : Statistiques d√©taill√©es avec utilisation vs limites
 * GET /api/subscription-stats/utilisation-ecoles
 * ACC√àS : Super_admin uniquement
 * 
 * Retourne pour chaque √©cole :
 * - Enseignants: 3/5 (60%) | Apprenants: 120/150 (80%) | Jeux: 8/10 (80%)
 * - Statut g√©n√©ral (Bon, Attention, Critique, etc.)
 * - Recommandations automatiques
 */
router.get('/utilisation-ecoles', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.getEcolesUtilisationAbonnements
);

/**
 * ‚úÖ √âCOLES EN RISQUE : Celles qui approchent de leurs limites
 * GET /api/subscription-stats/ecoles-en-risque?seuil=80
 * ACC√àS : Super_admin uniquement
 * 
 * Param√®tres optionnels :
 * - seuil : Pourcentage d'utilisation limite (d√©faut: 80%)
 * 
 * Retourne les √©coles d√©passant le seuil avec recommandations
 */
router.get('/ecoles-en-risque', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.getEcolesEnRisque
);

/**
 * ‚úÖ R√âSUM√â GLOBAL : Vue d'ensemble manag√©riale
 * GET /api/subscription-stats/resume-global
 * ACC√àS : Super_admin uniquement
 * 
 * Retourne :
 * - Moyennes d'utilisation par type de ressource
 * - R√©partition des √©coles par statut
 * - Alertes et m√©triques cl√©s
 */
router.get('/resume-global', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.getResumeUtilisationGlobale
);

/**
 * ‚úÖ √âCOLE SP√âCIFIQUE : D√©tails d'une √©cole
 * GET /api/subscription-stats/ecole/:ecoleId
 * ACC√àS : Admin de l'√©cole ou Super_admin
 * 
 * Retourne l'utilisation d√©taill√©e d'une √©cole sp√©cifique
 */
router.get('/ecole/:ecoleId', 
    authenticateToken,
    subscriptionStatsController.getEcoleUtilisationStats
);

// ===============================================
// ROUTES COMPL√âMENTAIRES (OPTIONNELLES)
// ===============================================

/**
 * üìä EXPORT CSV : Exporter les statistiques en CSV
 * GET /api/subscription-stats/export-csv
 * ACC√àS : Super_admin uniquement
 */
router.get('/export-csv', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.exportStatsCSV
);

/**
 * üìà TENDANCES : √âvolution de l'utilisation dans le temps
 * GET /api/subscription-stats/tendances?periode=3m
 * ACC√àS : Super_admin uniquement
 * 
 * Param√®tres :
 * - periode : 1m, 3m, 6m, 1y (d√©faut: 3m)
 */
router.get('/tendances', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.getTendancesUtilisation
);

/**
 * üîç RECHERCHE : Filtrer les √©coles par crit√®res
 * GET /api/subscription-stats/recherche?statut=Critique&ville=Brazzaville
 * ACC√àS : Super_admin uniquement
 * 
 * Param√®tres optionnels :
 * - statut : Bon, Mod√©r√©, Attention, Critique, Limite atteinte
 * - ville : Nom de la ville
 * - abonnement : Nom de l'abonnement
 * - seuil_min, seuil_max : Plage de pourcentage d'utilisation
 */
router.get('/recherche', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.rechercherEcoles
);

/**
 * ‚ö° STATS RAPIDES : M√©triques cl√©s en temps r√©el
 * GET /api/subscription-stats/quick-stats
 * ACC√àS : Super_admin uniquement
 * 
 * Retourne rapidement les KPIs essentiels
 */
router.get('/quick-stats', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.getQuickStats
);

/**
 * üìÖ PLANNING UPGRADES : √âcoles n√©cessitant un upgrade
 * GET /api/subscription-stats/planning-upgrades
 * ACC√àS : Super_admin uniquement
 * 
 * Retourne la liste des √©coles √† contacter pour upgrade
 */
router.get('/planning-upgrades', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.getPlanningUpgrades
);

/**
 * üèÜ COMPARAISON : Comparer plusieurs √©coles
 * POST /api/subscription-stats/comparer
 * ACC√àS : Super_admin uniquement
 * 
 * Body: { "ecoleIds": ["id1", "id2", "id3"] }
 */
router.post('/comparer', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.comparerEcoles
);

/**
 * üìä DASHBOARD : Donn√©es pour tableau de bord
 * GET /api/subscription-stats/dashboard
 * ACC√àS : Super_admin uniquement
 * 
 * Retourne toutes les donn√©es n√©cessaires pour un dashboard
 */
router.get('/dashboard', 
    authenticateToken,
    roleBasedAccessControl(['super_admin']),
    subscriptionStatsController.getDashboardData
);

// ===============================================
// ROUTES D'AIDE ET DEBUG
// ===============================================

/**
 * üìñ DOCUMENTATION : Format des r√©ponses
 * GET /api/subscription-stats/help
 * ACC√àS : Public (authentifi√©)
 */
router.get('/help', 
    authenticateToken,
    (req, res) => {
        res.status(200).json({
            success: true,
            message: 'Documentation des routes statistiques d\'abonnements',
            routes: {
                principales: {
                    'GET /utilisation-ecoles': 'Vue compl√®te utilisation vs limites',
                    'GET /ecoles-en-risque': '√âcoles d√©passant un seuil d\'utilisation',
                    'GET /resume-global': 'R√©sum√© ex√©cutif avec moyennes et alertes',
                    'GET /ecole/:id': 'D√©tails d\'une √©cole sp√©cifique'
                },
                complementaires: {
                    'GET /export-csv': 'Export des donn√©es en CSV',
                    'GET /tendances': '√âvolution temporelle',
                    'GET /recherche': 'Filtrage avanc√©',
                    'GET /quick-stats': 'KPIs essentiels',
                    'GET /planning-upgrades': '√âcoles √† upgrader'
                }
            },
            parametres: {
                seuil: 'Pourcentage limite (0-100, d√©faut: 80)',
                periode: '1m, 3m, 6m, 1y pour les tendances',
                filtres: 'statut, ville, abonnement, seuil_min, seuil_max'
            },
            exemples: {
                principal: 'GET /api/subscription-stats/utilisation-ecoles',
                risque: 'GET /api/subscription-stats/ecoles-en-risque?seuil=90',
                recherche: 'GET /api/subscription-stats/recherche?statut=Critique&ville=Brazzaville'
            }
        });
    }
);

/**
 * üîß HEALTH CHECK : V√©rifier le fonctionnement
 * GET /api/subscription-stats/health
 * ACC√àS : Public (authentifi√©)
 */
router.get('/health', 
    authenticateToken,
    async (req, res) => {
        try {
            // Test rapide de connexion aux mod√®les
            const [ecolesCount, abonnementsCount] = await Promise.all([
                require('../../models/Ecole').countDocuments(),
                require('../../models/Abonnement').countDocuments()
            ]);

            res.status(200).json({
                success: true,
                message: 'Service de statistiques op√©rationnel',
                status: 'healthy',
                data: {
                    ecolesEnBase: ecolesCount,
                    abonnementsEnBase: abonnementsCount,
                    timestamp: new Date().toISOString(),
                    version: '1.0.0'
                }
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                message: 'Probl√®me de connexion √† la base de donn√©es',
                status: 'unhealthy',
                error: error.message
            });
        }
    }
);

module.exports = router;